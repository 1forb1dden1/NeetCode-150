/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int longestPath(TreeNode* node){
        if(node == nullptr){
            return 0;
        }
        return 1 + max(longestPath(node->left), longestPath(node->right));
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int res = 0;
        if(root == nullptr){
            return 0;
        }
        int left = longestPath(root->left);
        int right = longestPath(root->right);
        res = left+right;

        int leftSubTree = diameterOfBinaryTree(root->left);
        int rightSubTree = diameterOfBinaryTree(root->right); 
        
        return max(res, max(leftSubTree, rightSubTree));
    }
};
