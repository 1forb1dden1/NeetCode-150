/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //Search left Subtree if they're p and q are smaller than root. 
        if(p->val < root->val && q ->val < root->val){
            return lowestCommonAncestor(root->left, p, q);
        //Sarch right subtree if p and q are greater than root. 
        } else if (p->val > root->val && q->val > root->val){
            return lowestCommonAncestor(root->right, p, q);
        //If one is larger and one is greater then the current node must be the LCA.
        } else {
            return root; 
        }
    }
};
