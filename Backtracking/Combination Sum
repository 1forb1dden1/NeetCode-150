class Solution {
public:

    void dfs(int index, vector<int>& candidates, int target, vector<int> curr, vector<vector<int>>& res){
        if(index >= candidates.size() || target < 0){
            return;
        }
        if(target == 0){
            res.push_back(curr);
            return;
        }
        curr.push_back(candidates[index]);
        dfs(index, candidates, target-candidates[index], curr, res);
        curr.pop_back();
        dfs(index+1, candidates, target, curr, res);
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> current;
        vector<vector<int>> res; 
        dfs(0, candidates, target, current, res);
        return res;
    }
};
