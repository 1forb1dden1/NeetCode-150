/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr){
            return l2; 
        }
        if(l2 == nullptr){
            return l1; 
        }
        int remainder = 0; 
        ListNode* dummy = new ListNode(); 
        ListNode* res = dummy;
        
        while( (l1 != nullptr) && (l2 != nullptr) ){
            int current = (remainder + l1->val + l2->val)%10;
            if(remainder + l1->val + l2->val >= 10){
                remainder = 1;
            } else {
                remainder = 0;
            }
            res->next = new ListNode(current);
            res = res->next;;

            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1 != nullptr){
            int current = (l1->val + remainder) % 10;
            if((l1->val + remainder) == 10){
                remainder = 1; 
            } else {
                remainder = 0; 
            }
            res->next = new ListNode(current);
            res = res->next;
            l1 = l1->next;
        }
        while(l2 != nullptr){
            int current = (l2->val + remainder) % 10;
            if((l2->val + remainder) == 10){
                remainder = 1; 
            } else {
                remainder = 0; 
            }
            res->next = new ListNode(current);
            res = res->next;
            l2 = l2 -> next;
        }
        if(remainder == 1){
            res->next = new ListNode(remainder); 
        }
        return dummy->next; 
    }
};
