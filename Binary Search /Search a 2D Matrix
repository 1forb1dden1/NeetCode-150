/*
first if statement line 13: if found return true;
else if statement line 18: Target has to be in that array or it's false.
else line 34: move the left and right pointers to find the array that target can be contained in. 
*/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int left = 0;
        int right = matrix.size()-1; 
        int middle = matrix.size()/2;
        while(left <= right){
            int row_size = matrix[middle].size();
            if(matrix[middle][0] == target || matrix[middle][row_size-1] == target){
                return true;
            }
            else if(matrix[middle][0] < target && matrix[middle][row_size-1] > target){
                int i = middle;
                left = 0; 
                right = row_size-1;
                while(left <= right){
                    middle = (left + right) / 2;
                    if(matrix[i][left] == target || matrix[i][right] == target || matrix[i][middle] == target) {
                        return true; 
                    }
                    else if(matrix[i][middle] > target){
                        right = middle - 1; 
                    } else {
                        left = middle + 1; 
                    }
                }
                return false; 
            } else {
                if(matrix[middle][0] > target && (right!=left)){
                    right = middle-1;
                } else if (matrix[middle][0] < target && (right!=left)){
                    left = middle+1; 
                } else {
                    return false;
                }
                middle = (left + right) / 2; 
            }
        }
        return false;
    }
};
