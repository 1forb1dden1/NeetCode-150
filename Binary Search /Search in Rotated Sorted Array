class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0){
            return -1; 
        }
        if(nums.size() == 1){
            if(nums[nums.size()-1] != target){
                return -1;
            } else {
                return 0;
            }
        }

        int left = 0;
        int right = nums.size()-1;

        while(left <= right){
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target || nums[left] == target || nums[right] == target) {
                return nums[mid] == target ? mid : (nums[left] == target ? left : right);
            }

            //the left side is sorted in ascending order
            if(nums[left] <= nums[mid]){
                //Somewhere between the left and the middle of the array.
                if(nums[left] <= target && nums[mid] > target){
                    right = mid - 1;
                } else {
                    left = mid + 1; 
                }
            //the right side is sorted in ascending order
            } else {
                //Somewhere between middle and the right side of the array. 
                if(nums[mid] < target && nums[right] > target){
                    left = mid + 1;
                } else {
                    right = mid - 1; 
                }
            }
        }

        return -1; 
    }
};
